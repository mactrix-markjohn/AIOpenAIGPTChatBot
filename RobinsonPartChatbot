#Enter in a new Jupyter notebook cell
import os
import openai
from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv()) # read local .env file

openai.api_key  = os.getenv('OPENAI_API_KEY')

#Enter in a new Jupyter notebook cell
def get_completion(prompt, model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message["content"]

def get_completion_from_messages(messages, model="gpt-3.5-turbo", temperature=0):
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature, # this is the degree of randomness of the model's output
    )
#     print(str(response.choices[0].message))
    return response.choices[0].message["content"]

#Enter in a new Jupyter notebook cell

 def collect_messages(_):
    prompt = inp.value_input
    inp.value = ''
    context.append({'role':'user', 'content':f"{prompt}"})
    response = get_completion_from_messages(context) 
    context.append({'role':'assistant', 'content':f"{response}"})
    panels.append(
        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))
    panels.append(
        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, style={'background-color': '#F6F6F6'})))
 
    return pn.Column(*panels)

    
#Enter in a new Jupyter notebook cell

import panel as pn  # GUI
pn.extension()

panels = [] # collect display 

context = [ {'role':'system', 'content':"""
You are HelicopterPartsOrderBot, an automated service to collect orders for the Robinson Helicopter Parts store. \
You first greet the customer, then collect the order, \
and then asks if it's a pickup or delivery. \
You wait to collect the entire order, then summarize it and check for a final \
time if the customer wants to add anything else. \
If it's a delivery, you ask for an address. \
Finally, you collect the payment.\
Make sure that the part is in stock, \
before selling it to the buyer.\
Make sure that you do not talk to the user about flying a helicopter \
Or anything about Robinson Helicopter or its employees.\
You respond in a short, very conversational friendly style. \
The Part database includes the following column: \
Part ID, Name, Price, Stock \
R3022-1, .016 CRES SHT 1 SQ FT,  $38.75, In Stock \
MS20995C25, .025 SAFETY WIRE, $43.50, In Stock \
MT357-1, .125 D. Cobalt Steel Drill, $7.25, In Stock \
MT357-3, .156 D. Steel Drill, $6.25, In Stock \
MT357-2, .375 D. Hand Reamer, $110.00, In Stock \
A701-7, .50 WIDE BLK DBL-SIDED TAPE, $306.00, In Stock \
B298-63, .75 UL94 2LB FOAM INSULATION, $11.00, In Stock \
MT358-1, .750 D. Spot Facing Assy. ,$263.00, In Stock \
0015-00423, 0015-00423 Gasket, $9.25, In Stock \
0015-00723, 0015-00723 Gasket, $9.25, In Stock \
01-0450685-00, 01-0450685-00 Clamp, $48.25, In Stock \
012C, 012C O-Ring, $1.85, In Stock \
"""} ]  # accumulate messages


inp = pn.widgets.TextInput(value="Hi", placeholder='Enter text hereâ€¦')
button_conversation = pn.widgets.Button(name="Chat!")

interactive_conversation = pn.bind(collect_messages, button_conversation)

dashboard = pn.Column(
    inp,
    pn.Row(button_conversation),
    pn.panel(interactive_conversation, loading_indicator=True, height=300),
)

dashboard



#Enter in a new Jupyter notebook cell

messages =  context.copy()
messages.append(
{'role':'system', 'content':'create a json summary of the previous food order. Itemize the price for each item\
 The fields should be 1) pizza, include size 2) list of toppings 3) list of drinks, include size   4) list of sides include size  5)total price '},    
)
 #The fields should be 1) pizza, price 2) list of toppings 3) list of drinks, include size include price  4) list of sides include size include price, 5)total price '},    

response = get_completion_from_messages(messages, temperature=0)
print(response)


     
